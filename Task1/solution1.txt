
«Планирование: анализ, идентификация проблем и поиск решений»


Проблемы клиентов:

В2С. Есть просроченные заказы, клиенты сообщает об этом компании, количество просроченных заказов возрастает, при том, что производственные мощности достаточны для выполнения заказов в срок.  Большая длительность обработки запросов пользователей при работе с 3D моделями и расчете стоимости изделия в MES. 

B2B. Есть просроченные заказы, клиенты сообщает об этом компании, количество просроченных заказов возрастает, при том, что производственные мощности достаточны для выполнения заказов в срок.     

Проблемы бизнеса:

Снижение качества обслуживания клиентов. Потеря клиентов. Риск успешности масштабирования бизнеса. 
Бизнес узнает о проблемах от клиентов. Количество жалоб возрастает. 
Операторы (производство). Проблемы с большой длительностью обновления первой страницы MES и получением актуальной информации о новых заказах, которые операторы готовы взять в работу. 


Существующие/потенциальные проблемные места

(1) В текущей ситуации клиент первым эскалирует проблему, когда не состоялась своевременная отгрузка. У «Александрита» нет информации о статусе заказа на отрезке бизнес-процесса: «от» подтверждения заказа в CRM и «до» отгрузки клиенту (MES). Отсутствует инструментарий для оперативного и точного выяснения проблем с подобными заказами и причин их возникновения, нет возможность проактивной идентификации проблем и их решения до того, как проблема станет известна клиенту. С дальнейшим ростом нагрузки на систему (ростом количества клиентов и трафика) проблемы с просрочкой заказов усугубятся. 
	
(Вариант действий) 	Недостаточный уровень наблюдаемости (observability) Jewerly Store System. Должна быть построена система мониторинга в разрезе метрик каждого контейнера (терминология С4) 			системы для контроля у управления текущим состоянием функционирования;  система логирования для возможности детализации информации об изменениях состояния; трассировки 			каждого заказа клиента в Jewerly Store System для получения детальных данных прохождении заказа между сервисами системы в рамках его исполнения; панели/дашборды для 				визуализации; алертинг

(2) Синхронное взаимодействие между клиентами, администраторами и операторами, компонентами и сервисами системы в условиях возрастающей нагрузки, необходимости масштабировать, повышения требований к надежности и отказоустойчивости системы, в ситуации с высоконагруженными сервисами (MES API, 3D file srorage) может быть проблемой. Необходимо переходить на маршрутизацию APIGateWay, балансировку запросов и асинхронное взаимодействие. 

(Вариант действий) 	Необходимо реализовывать API GateWay
			Необходимо реализовывать брокер сообщений. 
 
(3) Проблемой является долгое время отработки запросов пользователей (В2С и В2В) на запись и на чтение на этапе загрузки/дизайне 3D модели, расчете стоимости изготовления изделия. 

(Вариант действий) 	Необходимо провести настройки кеширования как на стороне клиента, так  и на стороне сервера. 
			Необходимо реализовать асинхронную маршрутизацию запросов пользователей к системе и с учетом балансировки нагрузки

(4) Проблемой является отсутствие нотификации клиентам об изменении состояния заказа. 

(Вариант действий) 	Необходимо реализовать микросервис нотификации об изменении состояния заказа

(5) Проблемой является долгое время отработки запросов оператора на получение реестра новых заказов. 

(Вариант действий) 	Необходимо провести настройки кеширования как на стороне клиента, так и на стороне сервера. 

(6) Узким местом является контейнер 3D file storage (контейнер для хранения 3D моделей  на базе S3-based storage, один инстанс). Запись 3D моделей в 3D file storage выполняют контейнер ShopAPI и контейнер MES API. Чтение 3D моделей из 3D file storage выполняют контейнер ShopAPI, контейнер MES API и контейнер CRM API. Судя по схеме сервисы обращаются к базе синхронно, на схеме отсутствует решение по асинхронной балансировке запросов к 3D file storage.  Процессы чтения и записи не «разделены», т. к. один инстанс базы. 3D модели – объемные, в зависимости от формата и детализации могут «весить» десятки-сотни мегабайт. При росте траффика, проблемы с производительностью и отказоустойчивостью 3D file storage будет нарастать.  

(Вариант действий) 	Не реализованы механизмы горизонтального масштабирования и репликации 3D file storage, не «разделены» процессы чтения (из slave-реплик) и записи (в master-реплику). 
			Не реализован механизм балансировки запросов пользователей на чтение и запись к 3D file storage в асинхронном режиме. 

(7) Узким местом является контейнер MES API (контейнер на С#). Контейнер развернут на одном инстансе. В рамках контейнера реализован большой функционал: обработка запросов на чтение и запись 3D моделей, загрузка 3D модели по внешнему API, расчет стоимости изготовления изделия по 3D модели, ведение реестра заказов и назначение исполнителя (оператора). Выполнение данного функционала требует значительных ресурсов «железа». Отсутствует асинхронная балансировка запросов. Запросы выполняются синхронно. Есть высокий риск снижения производительности и отказоустойчивости. В условиях роста нагрузки масштаб проблем будет расти. 

(Вариант действий) 	Не реализованы механизмы горизонтального масштабирования. Требуется масштабировать сервис на несколько инстансов, при этом в идеале разделить функционал по отдельным 				инстансам: отдельно – расчет стоимости изготовления изделия, отдельно загрузку 3D модели по внешнему API и последующая обработка, отдельно реестр заказов и назначение 				исполнителя (оператора). Реализация асинхронной балансировки запросов. 
			Часть сервиса, связанная с ведением реестра заказов и назначением исполнителя (оператора) может быть вынесена в отдельный микросервис, реализованный на Java

(8) Есть проблемы со скоростью выполнения релизного цикла и организацией процессов разработки, тестирования, деплоя и поддержки Системы. 

(Вариант действий) 	Необходимо повысить скорость и качество тестирования. Добиться это можно за счет бОльшей автоматизации процесса тестирования (сокращение объемов ручного тестирования), 			найма дополнительного персонала на тестирование. 
			Необходимо проводить нагрузочное тестирование, учитывая вышеописанные проблемы, проявляющиеся на фоне роста нагрузки на систему
			В рамках CI/CD необходимо разработать автоматизированные pipeline деплоя
			Также необходимо разработать инструменты отката релиза, если после его установки возникли проблемы в продуктивной системе. 
			Необходимо на регулярной основе заниматься поддержкой и администрированием системы с использованием мониторинга, метрик, разбирать при необходимости логи и проводить анализ 			данных трассировки заказов клиентов, информировать команду и бизнес о возникающих проблемах и участвовать в их решении
			Один тестировщик – этого недостаточно, необходим дополнительный найм. 
			Один DevOps инженер – этого также недостаточно, необходим дополнительный найм
			Возможно, необходим дополнительный найм инженеров по поддержке системы для мониторинга и оперативной реакции на обращения, инциденты, проблемы функционирования системы, 			выявленные мониторингом, и организация их работы в режиме 24/7 (учитывая разные часовые пояса клиентов). 

(9) Вероятно, потребуется вносить изменения в текущие бизнес-процессы. Результатом данных изменений будет новый беклог задач, связанный с функциональным развитием системы:

(Вариант действий) 	Проектирование и автоматизация продаж клиентам В2В (отличается от продаж В2С)
			Дизайн новых продуктовых метрик и сбор данной информации в рамках управления продуктовым развитием, процессов discovery и управления маркетинговой воронкой, сейлзовой 				воронкой, продуктовой воронкой. 
			Редизайн логистических процессов и реализация в системе новых сервисов  


Инициативы в части ИТ (с учетом их ранжирования)

Для приоритезации используем метод MoSCoW:
	Must have (MH) – обязательно
	Should have (SH) – важно
	Could have (CH) – желательно
	Would have (WH) – можно отказаться



Инициатива 1	Настроить в системе мониторинг в разрезе метрик всех компонентов системы, визуализировать метрики, настроит систему оповещений 
		Зачем? Чтобы в онлайн мониторить состояние функционирования системы, идентифицировать проблемы, информировать бизнес и команду, принимать решение о дальнейших действиях	
		Приоритет: MH

Инициатива 2	Настроить логирование	
		Зачем? Чтобы оперативно детализировать по логам проблемы, выявленные мониторингом, проанализировать и предоставить информацию для обоснованного решения	
		Приоритет: MH

Инициатива 3	Настроить трассировку заказов клиентов	
		Зачем? Чтобы оперативно отследить прохождение заказа клиента в системе, получить полную информацию, проанализировать и предоставить информацию для обоснованного принятия решения		Приоритет: MH

Инициатива 4	Внедрить API GatWay	
		Зачем? Чтобы упростить и улучить взаимодействие в микросервисной архитектуре: маршрутизация запросов, агрегация данных, управление доступом, управление трафиком, мониторинг и 			логирование	
		Приоритет: MH

Инициатива 5	Подключить hi-load микросервесы к брокеру сообщений (RabbitMQ)	
		Зачем? Чтобы обеспечить асинхронное взаимодействие между микросервисами системы, при этом обеспечив отказоустойчивость, масштабирование и высокую производсительность обработки 		сообщений	
		Приоритет: MH

Инициатива 6	Настроить кеширование на стороне клиентов (Shop API MES API CRM API)	
		Зачем? Чтобы снизить нагрузку на 3D file storage и снизить время обработки запроса клиента на чтение и запись 	
		Приоритет: MH

Инициатива 7	Настроить репликацию 3D file storage, разделить потоки запросов на чтение и запись между master и slave репликами	
		Зачем? Чтобы снизить нагрузку на базу, повысить надежность и отказоустойчивость базы, повысить производительность обработки запросов на чтение и на запись	
		Приоритет: MH

Инициатива 8	Настроить горизонтальное масштабирование MES API на несколько инстансов, разделить ключевой функционал на отдельные инстансы	
		Зачем? Чтобы повысить надежность и отказоустойчивость сервиса, повысить производительность обработки запросов пользователей	
		Приоритет: MH

Инициатива 9	Реализовать часть сервиса MES API, связанную с ведением реестра заказов и назначением исполнителя (оператора) в отдельном микросервисе на Java
		Зачем? Чтобы обеспечить независимость функционала от других высоконагруженных функций сервиса MES API, повысить доступность и быстродействие при работе операторов с системой	
		Приоритет: SH

Инициатива 10	Реализовать микросервис нотификации	
		Зачем? Чтобы система могла нотифицировать пользователям изменение состояния их заказов	
		Приоритет: SH

Инициатива 11	Спроектировать и автоматизировать пайплайн CI/CD	
		Зачем? Чтобы выполнять деплой в автоматизированном режиме	
		Приоритет: SH

Инициатива 12	Автоматизировать процессы ручного тестирования 	
		Зачем? Чтобы сократить срок тестирования и повысить качество тестирования перед деплоем	
		Приоритет: SH

Инициатива 13	Реализовать нагрузочное тестирование	
		Зачем? Чтобы была уверенность, что система справится с нагрузкой, и понимание предельных значений нагрузки	
		Приоритет: SH

Инициатива 14	Реализовать инструменты отката релиза, если после его установки возникли проблемы в продуктивной системе	
		Зачем? Чтобы в случае проблем после релиза, была возможность вернуть систему в дорелизное состояние	
		Приоритет: SH



Три пункта из инициатив, которые надо реализовать за полгода

Несмотря на высокие приоритеты, указанные инициативам, наиболее критично реализовать первые три, связанные с мониторингом, логированием и трассировкой, в результате чего повысить уровень наблюдаемости (observability) системы, собрать данные о функционировании и проблемах системы, с учетом этого, доработать остальные инициативы (удалить/добавить новые) и обоснованно принимать решения об их реализации. Другие инициативы можно делать в параллель первым трем, если есть уверенность в правильности и своевременности данных решений и будет достаточно ресурсов на их реализацию. 


Целевая архитектура через полгода

Соответственно, целевую архитектуру через полгода я вижу таким образом:
1.	Текущая архитектура Системы
2.	Добавлен мониторинг в разрезе метрик по каждому компоненту системы на базе решений Prometheus + Grafana
3.	Добавлено логирование на базе стека ELK
4.	Добавлена трассировка заказов клиентов на базе OpenTelemetry и Jaeger. 
