«Архитектурное решение по трейсингу»

Планирование трейсинга

Основываясь на бизнес-процессе, представленном в исходных данных задания, заказ клиента проходит исполнение через следующие компоненты системы [Internet Shop, MES API, CRM API, MES]:

INITIATED [Internet Shop] — пользователь завёл новый заказ или положил товары в пустую корзину.
FILE_UPLOADED [Internet Shop] — пользователь (В2С) загрузил файл с 3D-моделью или создал его с помощью конструктора.
FILE_UPLOADED [MES API] — пользователь (B2B) загрузил файл с 3D-моделью через выставленный API.
SUBMITTED [Internet Shop] — пользователь нажал на кнопку «Сделать заказ».
PRICE_CALCULATED [MES API] — система посчитала стоимость заказа.
MANUFACTURING_APPROVED [CRM] — заказ подтверждён, его можно отдавать в производство.
MANUFACTURING_STARTED [MES] — оператор взял заказ в работу.
MANUFACTURING_COMPLETED [MES] — оператор выполнил заказ.
PACKAGING [MES] — оператор начал упаковывать заказ.
SHIPPED [MES] — заказ отправлен покупателю.
CLOSED [CRM] — заказ завершён. Он закрывается после получения сообщения от транспортной компании или вручную.

В данных компонентах реализована бизнес-логика исполнения заказа. В данных компонентах системы в результате каких-либо проблем заказ клиента может «сломаться»/зависнуть. 

Помимо этого, заказ клиента может «сломаться» на стороне клиента при выполнении каких-либо действий в интерфейсе с ошибкой/ошибочно и тому подобное. Трассировка не даст информации о данных проблемах. Надо настраивать мониторинг клиентских метрик отдельно. В дальнейшем эти данные можно рассматривать с данными трассировки и логами и получить объективную информацию о проблемах на стороне пользователя. 

Заказ может «сломаться» из-за проблем при передаче запроса клиента между компонентами, при обращении к БД.  Трассировка не даст ответ о причинах и проблемах, в данных местах системы необходимо иметь мониторинг и логи и анализировать проблемы на основе этих данных и данных трассировки. 

Список данных, который должен попадать в трейсинг

trace_id
span_id
order_id
user_id
timestamp
status
trace.duration
span.duration
error
service.graph
retry.count
timeout

Мотивация

Как было сформулировано в ответе в Задании 2, невозможно решить проблемы с «потерей» заказов в приложении, идентифицировать проблемы и причины и «чинить» проактивно, до того как клиент узнает сам и пожалуется, без объективной информации о том, как функционирует каждый сервис и Система в целом.  Для этого необходимо повысить уровень наблюдаемости (observability) Системы за счет создания:
- системы мониторинга;
- системы логирования;
- трассировки заказов клиентов. 

В результате трассировки заказа клиента мы получим данные о прохождении заказа клиента в приложении, увидим узкие места, сможем проанализировать зависимости между компонентами и отладить сквозные сценарии. В результате использования трассировки заказов клиентов мы получим объективные данные о проблемах и причинах и сможем предпринять действия и повлиять (улучшить) на метрики системы:

- Количество ошибок: Number of HTTP 500. Метрика важна для бизнеса для SLA, так как показывает количество ошибок при выполнении запросов пользователей

- Длительность выполнения запросов: Response time (latency).  Метрика важна для бизнеса для SLA и для улучшения клиентского опыта. 

- Технические: retry и timeout, зависимости сервисов,  задержки на каждом шаге выполнения запроса


Предлагаемое решение 

См. в отдельном файле:
https://drive.google.com/file/d/1bitj0PqJd1ZFeItkQX7UHyjYW2wZg_pL/view?usp=sharing

Компромиссы

Как уже говорил ранее, трассировка не даст полной картины:

-Заказ клиента может «сломаться» на стороне клиента при выполнении каких-либо действий в интерфейсе с ошибкой/ошибочно и тому подобное. Трассировка не даст информации о данных проблемах. Надо настраивать мониторинг клиентских метрик отдельно. В дальнейшем эти данные можно рассматривать с данными трассировки и логами и получить объективную информацию о проблемах на стороне пользователя. 

-Заказ может «сломаться» из-за проблем при передаче запроса клиента между компонентами, при обращении к БД.  Трассировка не даст ответ о причинах и проблемах, в данных местах системы необходимо иметь мониторинг и логи и анализировать проблемы на основе этих данных и данных трассировки.

В связи с этим на схеме с предлагаемым решением я добавил мониторинг (Prometheus/Grafana) для получения метрик о функционировании всех компонентов системы. Для анализа потребуется смотреть данные мониторинга и трассировки в совокупности.  

Развертывание мониторинга и трейсинга (Prometheus, Grafana, OpenTelemetry и Jaeger) потребует дополнительных вычислительных ресурсов (данные возможности могут быть ограничены). Также потребуется принимать решение о том, каким образом настраивать сбор данных для мониторинга и трассировки на каждом компоненте, т. к. это дополнительная нагрузка на компоненты, которой также надо управлять. В ситуации с подключением проблемных высоконагруженных компонентов, возможно, в связи с этим будут ограничения. 

Аспекты безопасности

Необходимо подумать о снижении рисков утечки чувствительных данных и несанкционированного доступа. Ключевые моменты:

 -Персональные и чувствительные данные при трассировке и логировании необходимо максировать. 
 -Не надо логировать тела трассируемых запросов. 
 -При передаче данных от компонентов в систему трассировки, мониторинга и логирования не использовать открытые протоколы HTTP/gRPC, а использовать TLS для всех соединений, mTLS – аутентификацию для всех компонентов и API-ключи для Jaeger Collector
 -Необходимо проработать авторизацию пользователей к системам мониторинга, логирования, трассировки например, через OAuth/OpenID Connect. Проработать ролевую модель доступа
 -Для хранение трейсов надо использовать шифрование. 
 -Необходимо выработать политику очистки старых трейсов
 -Чтобы не задедосить систему трассировкой необходимо лимитировать трейсы на collector, приоритезировать критичные трейсы
 -Необходимо настроить мониторинг трассировки, следить за аномалиями, логировать доступ к Jaeger 
