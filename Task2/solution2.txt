«Выбор и настройка мониторинга в системе»

Мотивация. 

В текущей ситуации клиент первым эскалирует проблему, когда не состоялась своевременная отгрузка. У «Александрита» нет информации о статусе заказа. Отсутствует инструментарий для оперативного и точного выяснения проблем с подобными заказами и причин их возникновения, нет возможность проактивной идентификации проблем и их решения до того, как проблема станет известна клиенту. С дальнейшим ростом нагрузки на систему (ростом количества клиентов и траффика) проблемы с просрочкой заказов усугубятся. 

Невозможно решить данные проблемы без объективной информации о том, как функционирует каждый компонент и Система в целом, и по каким причинам важная для бизнеса информация «теряется», Система не обеспечивает требуемый уровень надежности и производительности. 

На текущем уровне развития информационных технологий проблемы со сбором объективной информации успешно решаются. Для этого необходимо повысить уровень наблюдаемости (observability) Системы за счет создания:
- системы мониторинга;
- системы логирования;
- трассировки заказов клиентов. 

Система мониторинга – ключевое решение, с которого необходимо начинать. Система мониторинга позволяет отслеживать состояние функционирования каждого компонента системы в разрезе метрик, идентифицировать проблемы и своевременно оповещать о них команду ИТ и бизнес для принятия решений и выполнения корректирующих ситуацию действий. 


Выбор подхода к мониторингу


Для Системы «Александрита» предлагаю использовать подход к мониторингу «Четыре золотых сигнала», который обеспечивает комплексный мониторинг end-to-end сервисов. Может быть обогащен метриками из других подходов (например, USE)

Другие подходы. USE – в большей степени ориентирован на мониторинг ресурсов, может быть не достаточен для мониторинга Системы. RED – более подходит для мониторинга системы, созданной на микросервисной архитектуре для API, веб-сервисов, является упрощением подхода «Четыре золотых сигнала». Система «Александрит» еще не на том уровне развития, в связи с чем, подход RED может так же не дать полной картины.  


Метрики для мониторинга

Number of dead-letter-exchange letters in RabbitMQ
Буду использовать. Метрика нужна для мониторинга проблемных сообщений в очереди, которые не могут быть обработаны нормальным образом. Ярлыки нужны: queue, vhost, reason – базовый контекст; service/app, error_type, env – для анализа бизнес-логики

Number of message in flight in RabbitMQ
Буду использовать. Метрика помогает мониторить стабильность потребителей сообщений, находить подвисшие сообщения до потери данных, оптимизировать лимит одновременной обработки (prefetch count). Ярлыки нужны: queue, vhost, consumer_tag – базовый контекст; service/app, message_type, env – для анализа бизнес-логики

Number of requests (RPS) for internet shop API, Number of requests (RPS) for CRM API, Number of requests (RPS) for MES API
Три метрики буду использовать. Метрика позволит контролировать нагрузку (количество запросов) в реальном времени, выявлять аномалии и предотвращать downtime при росте траффика, находить узкие места (например, медленные endpoints). Ярлыки нужны: endpoint, http_method, status_code – технические; user_type, compaign – для бизнес-анализа

Number of requests (RPS) per user for internet shop API, Number of requests (RPS) per user for CRM API, Number of requests (RPS) per user for MES API
Три метрики буду использовать. Метрика позволит выявлять аномальные активности пользователей, оценивать пользовательскую вовлеченность, планировать ресурсы.  Ярлыки нужны: user_id, user_type, endpoint, возможно еще divice и geo

CPU % for shop API
CPU % for CRM API
CPU % for MES API
Три метрики буду использовать. Метрика позволит предотвращать downtime при нагрузке, идентифицировать узкие места в коде, планировать ресурсы.  Ярлыки нужны: service, instance, endpoint, http_method, env

Memory Utilisation for shop API
Memory Utilisation for CRM API
Memory Utilisation for MES API
Memory Utilisation for shop db instance
Memory Utilisation for MES db instance
Пять метрик буду использовать. Метрика позволит контролировать «здоровье» и предотвращать аварийные остановки сервисов и БД при нагрузке, идентифицировать «прожорливые» запросы, планировать ресурсы.  Ярлыки нужны: service, instance, memory_type, env, version

Number of connections for shop db instance
Number of connections for MES db instance
Две метрики буду использовать. Метрика позволит контролировать нагрузку на БД, выявлять аномалии, планировать ресурсы и масштабирование. Ярлыки нужны: db_instance, db_type, user

Response time (latency) for shop API
Response time (latency) for CRM API
Response time (latency) for MES API
Три метрики буду использовать. Метрика позволит мониторить производительность системы, критичную для пользовательского опыта и SLA. Ярлыки нужны: endpoint, http_method, status_code, service, percentile

Size of S3 storage
Size of shop db instance
Size of MES db instance
Три метрики буду использовать. Метрика позволит мониторить дисковое пространство, предотвращать аварийные остановки из-за нехватки места, оптимизировать и планировать ресурсы. Ярлыки нужны: db_instance, db_type, env, component

Number of HTTP 200 for shop API
Number of HTTP 200 for CRM API
Number of HTTP 200 for MES API
Три метрики буду использовать. Метрика позволит мониторить работоспособности сервисов, проводить анализ пользовательской активности и выполнение SLA. Ярлыки нужны: endpoint, http_method, service, user_type, error_type

Number of HTTP 500 for shop API
Number of HTTP 500 for CRM API
Number of HTTP 500 for MES API
Number of HTTP 500 for shop API
Четыре метрики буду использовать. Метрика позволит мониторить и выявлять проблемы и сбои в работоспособности сервисов, критичных для пользовательского опыта, анализа пользовательской активности и выполнения SLA. Ярлыки нужны: endpoint, http_method, service, user_type, error_type

Number of simultanious sessions for shop API
Number of simultanious sessions for CRM API
Number of simultanious sessions for MES API
Три метрики буду использовать. Метрика позволит контролировать нагрузку на серверы, выявлять аномальную нагрузку, предотвращать атаки и фрод, планировать ресурсы. Ярлыки нужны: session_type, service, env, user_tier, traffic_source

Kb tranferred (received) for shop API
Kb tranferred (received) for CRM API
Kb tranferred (received) for MES API
Три метрики буду использовать. Метрика позволит контролировать сетевую нагрузку, оптимизировать производительность, планировать ресурсы. Ярлыки нужны: endpoint, http_method, content_type

Kb provided (sent) for shop API
Kb provided (sent) for CRM API
Kb provided (sent) for MES API
Три метрики буду использовать. Метрика позволит контролировать исходящий трафик, оптимизировать производительность, планировать ресурсы. Ярлыки нужны: endpoint, response_type, content_type


План действий

Анализ проблем бизнеса и ИТ-решения
Формирование команды, задача которой будет реализовать систему мониторинга
Выбор подхода к построению системы мониторинга
Определение метрик
Определение будущих пользователей мониторинга, способа информирования
Определение ролевой модели
Выбор программных решений, на которых будет реализована система мониторинга
(например, Prometheus + Grafana)
Подготовка инфраструктуры для развертывания  системы мониторинга
Развертывание Prometheus + Grafana
Настройка метрик для всех сервисов и БД Системы
Настройка экспортеров
Настройка дашбордов Grafana
Настройка алертов
Интеграция MES компонента (С#)
Обучение персонала
Эксплуатация и оптимизация системы мониторинга

В итоге получаем результат: 
-Единая система мониторинга всех компонентов в разрезе метрик
-Автоматические алерты по правилам выбранного подхода для мониторинга
-Готовые дашборды
-Обученный персонал
-Ролевая модель для бизнеса и ИТ-команды
